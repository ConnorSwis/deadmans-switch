<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Home</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="w-full max-w-2xl mx-auto text-lg text-white">
    <div
      class="flex flex-col items-center justify-center w-full min-h-screen gap-8"
    >
      <button
        onclick="checkIn()"
        class="p-12 rounded-full text-center w-[50vw] h-full max-w-2xl"
      >
        <h1 class="text-6xl"><span id="timer">Calculating...</span></h1>
      </button>
      <div>
        <button onclick="addPlus()">+</button>
        <button onclick="addSubtract()">-</button>
      </div>
    </div>
    <script>
      const CHECK_IN_INTERVAL = parseInt("<%=CHECK_IN_INTERVAL%>");

      function getLastCheckIn() {
        return fetch("/last-check-in")
          .then((res) => res.json())
          .then((data) => {
            return data.timestamp;
          });
      }
      let add = 1000 * 60 * 60 * 0;
      function addPlus() {
        add += 1000 * 60 * 60 * 1;
      }
      function addSubtract() {
        add -= 1000 * 60 * 60 * 1;
      }
      function updateTimer(lastCheckIn) {
        const now = Date.now() + add;
        const timeLeft = CHECK_IN_INTERVAL - (now - lastCheckIn);
        const hours = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        document.getElementById(
          "timer"
        ).textContent = `${hours}h ${minutes}m ${seconds}s`;

        setBackgroundColor(now - lastCheckIn);
      }

      let lastCheckInTimestamp;
      getLastCheckIn().then((timestamp) => {
        lastCheckInTimestamp = timestamp;
        updateTimer(lastCheckInTimestamp);
        setInterval(() => updateTimer(lastCheckInTimestamp), 1000);
      });

      function checkIn() {
        fetch("/check-in").then(() => {
          getLastCheckIn().then((timestamp) => {
            lastCheckInTimestamp = new Date(timestamp);
            updateTimer(lastCheckInTimestamp);
            add = 0;
          });
        });
      }

      function setBackgroundColor(timeSince) {
        const bodyElement = document.body;
        const buttonElement = document.querySelector("button");
        const elapsedTimePercentage = timeSince / CHECK_IN_INTERVAL;
        let color;

        if (elapsedTimePercentage <= 0.25) {
          color = "#00FF00";
        } else if (elapsedTimePercentage <= 0.5) {
          color = interpolateColor(
            "#00FF00",
            "#FFFF00",
            (elapsedTimePercentage - 0.25) * 4
          );
        } else {
          color = interpolateColor(
            "#FFFF00",
            "#FF0000",
            (elapsedTimePercentage - 0.5) * 2
          );
        }

        bodyElement.style.backgroundColor = color;
        buttonElement.style.backgroundColor = invertColor(color);
      }

      function hexToRgb(hex) {
        hex = hex.charAt(0) === "#" ? hex.slice(1) : hex;
        let bigint = parseInt(hex, 16);
        let r = (bigint >> 16) & 255;
        let g = (bigint >> 8) & 255;
        let b = bigint & 255;

        return [r, g, b];
      }

      function invertColor(hex) {
        const [r, g, b] = hexToRgb(hex);

        const invertedR = 255 - r;
        const invertedG = 255 - g;
        const invertedB = 255 - b;

        let hexR = invertedR.toString(16).padStart(2, "0");
        let hexG = invertedG.toString(16).padStart(2, "0");
        let hexB = invertedB.toString(16).padStart(2, "0");

        return `#${hexR}${hexG}${hexB}`;
      }

      function interpolateColor(hexColor1, hexColor2, percentage) {
        let color1 = hexToRgb(hexColor1);
        let color2 = hexToRgb(hexColor2);

        let r = Math.round(color1[0] + (color2[0] - color1[0]) * percentage);
        let g = Math.round(color1[1] + (color2[1] - color1[1]) * percentage);
        let b = Math.round(color1[2] + (color2[2] - color1[2]) * percentage);

        let hexR = r.toString(16).padStart(2, "0");
        let hexG = g.toString(16).padStart(2, "0");
        let hexB = b.toString(16).padStart(2, "0");

        return `#${hexR}${hexG}${hexB}`;
      }
    </script>
  </body>
</html>
